name: Release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+*"

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.release.outputs.id }}
      upload_url: ${{ steps.release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: tag_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --reverse)
          else
            COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" --reverse)
          fi

          # Create changelog
          cat << EOF > RELEASE_NOTES.md
          ## What's Changed

          $COMMITS

          ## Downloads

          Choose the appropriate file for your platform:

          - **macOS (Apple Silicon)**: \`v-upscale_*_aarch64.dmg\`
          - **macOS (Intel)**: \`v-upscale_*_x64.dmg\`
          - **Windows**: \`v-upscale_*.msi\`
          - **Linux**: \`v-upscale_*.deb\` or \`v-upscale_*.AppImage\`

          ## Installation & Usage

          1. Download and install the appropriate package for your system
          2. Launch V-Upscale
          3. Click "Test MoltenVK" to verify GPU acceleration is working
          4. Select an image and choose your upscaling factor (2x, 4x, or 8x)
          5. Click "Upscale Image" and wait for processing
          6. Download your enhanced image!

                     ## System Requirements
           
           **No additional software installation required!**
           
           - **macOS**: 10.15+ with any Metal-capable GPU
           - **Windows**: Windows 10+ with any DirectX 11+ GPU
           - **Linux**: Any recent distribution with basic GPU drivers
           
           All Vulkan libraries and dependencies are bundled internally.

          ## Need Help?

          - 📖 [Documentation](https://github.com/${{ github.repository }}#readme)
          - 🐛 [Report Issues](https://github.com/${{ github.repository }}/issues)
          - 💬 [Discussions](https://github.com/${{ github.repository }}/discussions)
          EOF

      - name: Create Release
        id: release
        uses: softprops/action-gh-release@v2
        with:
          name: V-Upscale ${{ steps.tag_version.outputs.VERSION }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ contains(steps.tag_version.outputs.VERSION, 'alpha') || contains(steps.tag_version.outputs.VERSION, 'beta') || contains(steps.tag_version.outputs.VERSION, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-release:
    name: Build Release (${{ matrix.target }})
    needs: create-release
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-apple-darwin
            os: macos-latest
            name: macos-arm64

          - target: x86_64-apple-darwin
            os: macos-latest
            name: macos-x64

          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: windows-x64

          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-x64

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src-tauri/target/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Vulkan SDK (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install vulkan-headers vulkan-loader vulkan-tools
          # Ensure MoltenVK libraries are available
          mkdir -p src-tauri/moltenvk
          cp /opt/homebrew/lib/libMoltenVK.dylib src-tauri/moltenvk/ 2>/dev/null || echo "Using bundled MoltenVK"
          cp /opt/homebrew/lib/libvulkan.dylib src-tauri/moltenvk/ 2>/dev/null || echo "Using bundled Vulkan loader"

      - name: Install Vulkan SDK (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Use latest stable Vulkan SDK version (released Jan 14, 2025)
          $version = "1.4.304.0"
          $url = "https://sdk.lunarg.com/sdk/download/$version/windows/VulkanSDK-$version-Installer.exe"
          $installer = "$env:TEMP\VulkanSDKInstaller.exe"

          Write-Host "Downloading Vulkan SDK $version..."

          # Download with timeout and retry
          $downloadSuccess = $false
          $maxRetries = 3
          for ($i = 1; $i -le $maxRetries; $i++) {
            try {
              Write-Host "Download attempt $i/$maxRetries"
              Invoke-WebRequest -Uri $url -OutFile $installer -TimeoutSec 300
              $downloadSuccess = $true
              break
            } catch {
              Write-Host "Download attempt $i failed: $_"
              if ($i -eq $maxRetries) {
                throw "Failed to download Vulkan SDK after $maxRetries attempts"
              }
              Start-Sleep -Seconds 5
            }
          }

          if (-not $downloadSuccess) {
            throw "Failed to download Vulkan SDK"
          }

          Write-Host "Installing Vulkan SDK (this may take a few minutes)..."

          # Install with timeout
          $process = Start-Process -FilePath $installer -ArgumentList "/S" -PassThru
          $timeout = 600  # 10 minutes timeout

          if ($process.WaitForExit($timeout * 1000)) {
            if ($process.ExitCode -eq 0) {
              Write-Host "Vulkan SDK installation completed successfully"
            } else {
              throw "Vulkan SDK installation failed with exit code: $($process.ExitCode)"
            }
          } else {
            $process.Kill()
            throw "Vulkan SDK installation timed out after $timeout seconds"
          }

          # Clean up installer
          Remove-Item $installer -ErrorAction SilentlyContinue

          # Set environment variables
          $VulkanPath = "C:\VulkanSDK\$version"
          if (Test-Path $VulkanPath) {
            echo "VULKAN_SDK=$VulkanPath" | Out-File -FilePath $env:GITHUB_ENV -Append
            echo "PATH=$VulkanPath\Bin;$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Append
            Write-Host "Vulkan SDK installed successfully at: $VulkanPath"
          } else {
            # Fallback: find the actual installation directory
            $VulkanPath = Get-ChildItem -Path "C:\VulkanSDK" -Directory -ErrorAction SilentlyContinue | Sort-Object Name -Descending | Select-Object -First 1 -ExpandProperty FullName
            if ($VulkanPath) {
              echo "VULKAN_SDK=$VulkanPath" | Out-File -FilePath $env:GITHUB_ENV -Append
              echo "PATH=$VulkanPath\Bin;$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Append
              Write-Host "Vulkan SDK found at: $VulkanPath"
            } else {
              throw "Vulkan SDK installation directory not found"
            }
          }

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y libvulkan-dev vulkan-tools libgtk-3-dev libwebkit2gtk-4.1-dev libayatana-appindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile

      - name: Build frontend
        run: pnpm run build

      - name: Build release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_SECRET }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: --target ${{ matrix.target }}

  post-release:
    name: Post Release Tasks
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get release info
        id: release_info
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "RELEASE_URL=https://github.com/${{ github.repository }}/releases/tag/${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Update latest release info
        run: |
          echo "Latest release: ${{ steps.release_info.outputs.VERSION }}" > LATEST_RELEASE.txt
          echo "Release URL: ${{ steps.release_info.outputs.RELEASE_URL }}" >> LATEST_RELEASE.txt

      - name: Update homebrew formula (macOS)
        if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, 'alpha') && !contains(github.ref, 'beta')
        run: |
          echo "TODO: Update Homebrew formula for stable releases"
          # Future: Automate homebrew formula updates
